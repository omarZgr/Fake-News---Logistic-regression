# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZeUK3fTSolBYD1CWXKyGp7UBG6d75cFY
"""

import numpy as np
import pandas as pd

from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import re

!pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle competitions download -c fake-news

from zipfile import ZipFile
dataSet = '/content/fake-news.zip'

with ZipFile(dataSet,'r') as zip :
  zip.extractall()
  print("the dataset extracted")

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))
print(stopwords.words('french'))
print(stopwords.words('arabic'))

news_dataSet = pd.read_csv('/content/train.csv')
news_dataSet

#counitng the number of missing values in dataSet

news_dataSet.isnull().sum()

#remplace by empty string
news_dataSet = news_dataSet.fillna('')
news_dataSet.isnull().sum()

#merge title && autohr just cuz text is so large

news_dataSet['content'] = news_dataSet['title'] + ' ' + news_dataSet['author']

X = news_dataSet.drop('label',axis=1)
Y = news_dataSet['label']

#Stremming : is the process of reducing a word to its Root word

port_stem = PorterStemmer()

def stemming(content):
    stemmed_content = re.sub('[^a-zA-Z]',' ',content)
    stemmed_content = stemmed_content.lower()
    stemmed_content = stemmed_content.split()
    stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
    stemmed_content = ' '.join(stemmed_content)
    return stemmed_content

news_dataSet['content']

news_dataSet['content'] = news_dataSet['content'].apply(stemming)

X = news_dataSet['content'].values
Y = news_dataSet['label'].values

X

Y

#convert textual data to numerical data

vectorize = TfidfVectorizer()
vectorize.fit(X)

X_num_data = vectorize.transform(X)


X_train, X_test, Y_train, Y_test = train_test_split(X_num_data, Y, test_size = 0.2, stratify=Y, random_state=2)

model = LogisticRegression()
model.fit(X_train,Y_train)

# accuracy score on the training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy score of the training data : ', training_data_accuracy)

# accuracy score on the test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy score of the test data : ', test_data_accuracy)

X_new = X_test[3]

prediction = model.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('The news is Real')
else:
  print('The news is Fake')

print(Y_test[3])